// This code was autogenerated with dbus-codegen-rust, see https://github.com/diwic/dbus-rs

use dbus as dbus;
use dbus::arg;

#[derive(Debug, Default)]
pub struct OrgFreedesktopDBusPropertiesPropertiesChanged {
    pub interface_name: String,
    pub changed_properties: ::std::collections::HashMap<String, arg::Variant<Box<arg::RefArg + 'static>>>,
    pub invalidated_properties: Vec<String>,
}

impl dbus::SignalArgs for OrgFreedesktopDBusPropertiesPropertiesChanged {
    const NAME: &'static str = "PropertiesChanged";
    const INTERFACE: &'static str = "org.freedesktop.DBus.Properties";
    fn append(&self, i: &mut arg::IterAppend) {
        arg::RefArg::append(&self.interface_name, i);
        arg::RefArg::append(&self.changed_properties, i);
        arg::RefArg::append(&self.invalidated_properties, i);
    }
    fn get(&mut self, i: &mut arg::Iter) -> Result<(), arg::TypeMismatchError> {
        self.interface_name = i.read()?;
        self.changed_properties = i.read()?;
        self.invalidated_properties = i.read()?;
        Ok(())
    }
}

pub trait OrgFreedesktopDBusIntrospectable {
    type Err;
    fn introspect(&self) -> Result<String, Self::Err>;
}

impl<'a, C: ::std::ops::Deref<Target=dbus::Connection>> OrgFreedesktopDBusIntrospectable for dbus::ConnPath<'a, C> {
    type Err = dbus::Error;

    fn introspect(&self) -> Result<String, Self::Err> {
        let mut m = self.method_call_with_args(&"org.freedesktop.DBus.Introspectable".into(), &"Introspect".into(), |_| {
        })?;
        m.as_result()?;
        let mut i = m.iter_init();
        let xml_data: String = i.read()?;
        Ok(xml_data)
    }
}

pub trait OrgFreedesktopDBusPeer {
    type Err;
    fn ping(&self) -> Result<(), Self::Err>;
    fn get_machine_id(&self) -> Result<String, Self::Err>;
}

impl<'a, C: ::std::ops::Deref<Target=dbus::Connection>> OrgFreedesktopDBusPeer for dbus::ConnPath<'a, C> {
    type Err = dbus::Error;

    fn ping(&self) -> Result<(), Self::Err> {
        let mut m = self.method_call_with_args(&"org.freedesktop.DBus.Peer".into(), &"Ping".into(), |_| {
        })?;
        m.as_result()?;
        Ok(())
    }

    fn get_machine_id(&self) -> Result<String, Self::Err> {
        let mut m = self.method_call_with_args(&"org.freedesktop.DBus.Peer".into(), &"GetMachineId".into(), |_| {
        })?;
        m.as_result()?;
        let mut i = m.iter_init();
        let machine_uuid: String = i.read()?;
        Ok(machine_uuid)
    }
}

pub trait OrgFreedesktopNetworkManagerSettings {
    type Err;
    fn list_connections(&self) -> Result<Vec<dbus::Path<'static>>, Self::Err>;
    fn get_connection_by_uuid(&self, uuid: &str) -> Result<dbus::Path<'static>, Self::Err>;
    fn add_connection(&self, connection: ::std::collections::HashMap<&str, ::std::collections::HashMap<&str, arg::Variant<Box<arg::RefArg>>>>) -> Result<dbus::Path<'static>, Self::Err>;
    fn add_connection_unsaved(&self, connection: ::std::collections::HashMap<&str, ::std::collections::HashMap<&str, arg::Variant<Box<arg::RefArg>>>>) -> Result<dbus::Path<'static>, Self::Err>;
    fn load_connections(&self, filenames: Vec<&str>) -> Result<(bool, Vec<String>), Self::Err>;
    fn reload_connections(&self) -> Result<bool, Self::Err>;
    fn save_hostname(&self, hostname: &str) -> Result<(), Self::Err>;
    fn get_connections(&self) -> Result<Vec<dbus::Path<'static>>, Self::Err>;
    fn get_hostname(&self) -> Result<String, Self::Err>;
    fn get_can_modify(&self) -> Result<bool, Self::Err>;
}

impl<'a, C: ::std::ops::Deref<Target=dbus::Connection>> OrgFreedesktopNetworkManagerSettings for dbus::ConnPath<'a, C> {
    type Err = dbus::Error;

    fn list_connections(&self) -> Result<Vec<dbus::Path<'static>>, Self::Err> {
        let mut m = self.method_call_with_args(&"org.freedesktop.NetworkManager.Settings".into(), &"ListConnections".into(), |_| {
        })?;
        m.as_result()?;
        let mut i = m.iter_init();
        let connections: Vec<dbus::Path<'static>> = i.read()?;
        Ok(connections)
    }

    fn get_connection_by_uuid(&self, uuid: &str) -> Result<dbus::Path<'static>, Self::Err> {
        let mut m = self.method_call_with_args(&"org.freedesktop.NetworkManager.Settings".into(), &"GetConnectionByUuid".into(), |msg| {
            let mut i = arg::IterAppend::new(msg);
            i.append(uuid);
        })?;
        m.as_result()?;
        let mut i = m.iter_init();
        let connection: dbus::Path<'static> = i.read()?;
        Ok(connection)
    }

    fn add_connection(&self, connection: ::std::collections::HashMap<&str, ::std::collections::HashMap<&str, arg::Variant<Box<arg::RefArg>>>>) -> Result<dbus::Path<'static>, Self::Err> {
        let mut m = self.method_call_with_args(&"org.freedesktop.NetworkManager.Settings".into(), &"AddConnection".into(), |msg| {
            let mut i = arg::IterAppend::new(msg);
            i.append(connection);
        })?;
        m.as_result()?;
        let mut i = m.iter_init();
        let path: dbus::Path<'static> = i.read()?;
        Ok(path)
    }

    fn add_connection_unsaved(&self, connection: ::std::collections::HashMap<&str, ::std::collections::HashMap<&str, arg::Variant<Box<arg::RefArg>>>>) -> Result<dbus::Path<'static>, Self::Err> {
        let mut m = self.method_call_with_args(&"org.freedesktop.NetworkManager.Settings".into(), &"AddConnectionUnsaved".into(), |msg| {
            let mut i = arg::IterAppend::new(msg);
            i.append(connection);
        })?;
        m.as_result()?;
        let mut i = m.iter_init();
        let path: dbus::Path<'static> = i.read()?;
        Ok(path)
    }

    fn load_connections(&self, filenames: Vec<&str>) -> Result<(bool, Vec<String>), Self::Err> {
        let mut m = self.method_call_with_args(&"org.freedesktop.NetworkManager.Settings".into(), &"LoadConnections".into(), |msg| {
            let mut i = arg::IterAppend::new(msg);
            i.append(filenames);
        })?;
        m.as_result()?;
        let mut i = m.iter_init();
        let status: bool = i.read()?;
        let failures: Vec<String> = i.read()?;
        Ok((status, failures))
    }

    fn reload_connections(&self) -> Result<bool, Self::Err> {
        let mut m = self.method_call_with_args(&"org.freedesktop.NetworkManager.Settings".into(), &"ReloadConnections".into(), |_| {
        })?;
        m.as_result()?;
        let mut i = m.iter_init();
        let status: bool = i.read()?;
        Ok(status)
    }

    fn save_hostname(&self, hostname: &str) -> Result<(), Self::Err> {
        let mut m = self.method_call_with_args(&"org.freedesktop.NetworkManager.Settings".into(), &"SaveHostname".into(), |msg| {
            let mut i = arg::IterAppend::new(msg);
            i.append(hostname);
        })?;
        m.as_result()?;
        Ok(())
    }

    fn get_connections(&self) -> Result<Vec<dbus::Path<'static>>, Self::Err> {
        <Self as dbus::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.NetworkManager.Settings", "Connections")
    }

    fn get_hostname(&self) -> Result<String, Self::Err> {
        <Self as dbus::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.NetworkManager.Settings", "Hostname")
    }

    fn get_can_modify(&self) -> Result<bool, Self::Err> {
        <Self as dbus::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.NetworkManager.Settings", "CanModify")
    }
}

#[derive(Debug, Default)]
pub struct OrgFreedesktopNetworkManagerSettingsPropertiesChanged {
    pub properties: ::std::collections::HashMap<String, arg::Variant<Box<arg::RefArg + 'static>>>,
}

impl dbus::SignalArgs for OrgFreedesktopNetworkManagerSettingsPropertiesChanged {
    const NAME: &'static str = "PropertiesChanged";
    const INTERFACE: &'static str = "org.freedesktop.NetworkManager.Settings";
    fn append(&self, i: &mut arg::IterAppend) {
        arg::RefArg::append(&self.properties, i);
    }
    fn get(&mut self, i: &mut arg::Iter) -> Result<(), arg::TypeMismatchError> {
        self.properties = i.read()?;
        Ok(())
    }
}

#[derive(Debug, Default)]
pub struct OrgFreedesktopNetworkManagerSettingsNewConnection {
    pub connection: dbus::Path<'static>,
}

impl dbus::SignalArgs for OrgFreedesktopNetworkManagerSettingsNewConnection {
    const NAME: &'static str = "NewConnection";
    const INTERFACE: &'static str = "org.freedesktop.NetworkManager.Settings";
    fn append(&self, i: &mut arg::IterAppend) {
        arg::RefArg::append(&self.connection, i);
    }
    fn get(&mut self, i: &mut arg::Iter) -> Result<(), arg::TypeMismatchError> {
        self.connection = i.read()?;
        Ok(())
    }
}

#[derive(Debug, Default)]
pub struct OrgFreedesktopNetworkManagerSettingsConnectionRemoved {
    pub connection: dbus::Path<'static>,
}

impl dbus::SignalArgs for OrgFreedesktopNetworkManagerSettingsConnectionRemoved {
    const NAME: &'static str = "ConnectionRemoved";
    const INTERFACE: &'static str = "org.freedesktop.NetworkManager.Settings";
    fn append(&self, i: &mut arg::IterAppend) {
        arg::RefArg::append(&self.connection, i);
    }
    fn get(&mut self, i: &mut arg::Iter) -> Result<(), arg::TypeMismatchError> {
        self.connection = i.read()?;
        Ok(())
    }
}
